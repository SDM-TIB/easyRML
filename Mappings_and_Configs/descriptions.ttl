
############## data sources to be uploaded ################

# User can upload several data sources with different formats!! Let's start with csv...

################# triplesMap #################

1. source:  
Instead of uploading all files at once, for each triplesMap we ask the user to upload
related dataset (or the header of the dataset). In this scenario we'll need :
	a. one "inputField" to get the format of the data source
	b. one "uploadFile" button to get the data file from the user -> send it to the backend
	c. -> receive the suggested field names from backend and show the as "dropdown" whereever the suggestion of fields' names are required

################## subject #################

1. subjectType: reference to data as URI (previously as class)
Here we need to get TWO values from the user : 
	a. one "dropdown" to suggest the classes of the ontology => the value will be stored as "subjectMap:" in the config file
	b. one "dropdown" to suggest the fields' names of the data source that is selected for the triplesMap by the user => the value will be stored as "dataField:" in the config file
(examle:@mapping_1.ini->[TM1])
(examle:@mapping_2.ini->[TM1])
(examle:@mapping_3.ini->[TM2])

2. subjectType: reference to functionMap
Here we need :
	a. one "inputField" to get the names of the functionMap ("functionMapName:" in config file) => the value will be stored as "subjectMap:" in the config file
(examle:@mapping_3.ini->[TM1])

################# Predicate ##################
predicate: 

Here we need :
	a. one "dropdown" to suggest the properties of the ontology => the value will be stored as "predicate:" in the config file

################### Object  ###################

1. objectType: class (example )
Here we need to get ONE value from the user :
	a. one "dropdown" to suggest the classes of the ontology => the value will be stored as "objectMap:" in the config file
(example:@mapping_1.ini->[TM1_POM1])

2. objectType: reference to data
Here we need to get ONE value from the user : 
	a. one "dropdown" to suggest the the fields' names of the data source that is selected for the triplesMap by the user =>  the value will be stored as "objectMap:" in config file
(example:@mapping_1.ini->[TM1_POM2])

3. objectType: reference to data as URI
Here we need to get TWO values from the user : 
	a. one "dropdown" to suggest the classes of the ontology => the value will be stored as "objectMap:" in the config file
	b. one "dropdown" to suggest the fields' names of the data source that is selected for the triplesMap by the user => the value will be stored as "dataField:" in the config file
(examle:@mapping_1.ini->[TM1_POM3])

4. objectType: reference to triplesMap
Here we need :
	a. one "inputField" to get the names of the triplesMap ("name:" in config file) => the value will be stored as "objectMap:" in the config file
(examle:@mapping_2.ini->[TM1_POM1])

5. objectType: reference to functionMap
Here we need :
	a. one "inputField" to get the names of the functionMap ("functionMapName:" in config file) => the value will be stored as "objectMap:" in the config file
(examle:@mapping_2.ini->[TM2_POM1])

##################

joinCondition: yes
Here we need :
	a. one "inputField" to get the child value from user => the value will be stored as "child:" in the config file
	b. one "inputField" to get the parent value from user => the value will be stored as "parent:" in the config file
(examle:@mapping_3.ini->[TM1_POM1])




